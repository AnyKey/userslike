// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package like

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubSrvClient is the client API for SubSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubSrvClient interface {
	SetLike(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*LikeReply, error)
	GetLike(ctx context.Context, in *TrackRequest, opts ...grpc.CallOption) (*TrackReply, error)
}

type subSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewSubSrvClient(cc grpc.ClientConnInterface) SubSrvClient {
	return &subSrvClient{cc}
}

func (c *subSrvClient) SetLike(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*LikeReply, error) {
	out := new(LikeReply)
	err := c.cc.Invoke(ctx, "/main.SubSrv/SetLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subSrvClient) GetLike(ctx context.Context, in *TrackRequest, opts ...grpc.CallOption) (*TrackReply, error) {
	out := new(TrackReply)
	err := c.cc.Invoke(ctx, "/main.SubSrv/GetLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubSrvServer is the server API for SubSrv service.
// All implementations must embed UnimplementedSubSrvServer
// for forward compatibility
type SubSrvServer interface {
	SetLike(context.Context, *LikeRequest) (*LikeReply, error)
	GetLike(context.Context, *TrackRequest) (*TrackReply, error)
	mustEmbedUnimplementedSubSrvServer()
}

// UnimplementedSubSrvServer must be embedded to have forward compatible implementations.
type UnimplementedSubSrvServer struct {
}

func (UnimplementedSubSrvServer) SetLike(context.Context, *LikeRequest) (*LikeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLike not implemented")
}
func (UnimplementedSubSrvServer) GetLike(context.Context, *TrackRequest) (*TrackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLike not implemented")
}
func (UnimplementedSubSrvServer) mustEmbedUnimplementedSubSrvServer() {}

// UnsafeSubSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubSrvServer will
// result in compilation errors.
type UnsafeSubSrvServer interface {
	mustEmbedUnimplementedSubSrvServer()
}

func RegisterSubSrvServer(s grpc.ServiceRegistrar, srv SubSrvServer) {
	s.RegisterService(&SubSrv_ServiceDesc, srv)
}

func _SubSrv_SetLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubSrvServer).SetLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.SubSrv/SetLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubSrvServer).SetLike(ctx, req.(*LikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubSrv_GetLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubSrvServer).GetLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.SubSrv/GetLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubSrvServer).GetLike(ctx, req.(*TrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubSrv_ServiceDesc is the grpc.ServiceDesc for SubSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.SubSrv",
	HandlerType: (*SubSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetLike",
			Handler:    _SubSrv_SetLike_Handler,
		},
		{
			MethodName: "GetLike",
			Handler:    _SubSrv_GetLike_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "like/like.proto",
}
